#!/usr/bin/env python

"""
extract-control.py --input <infile>.gff > <outfile>.fasta

This script takes an input of a gff file (usually generated by Proka) with a
##FASTA section containing the sequence data, and outputs a FASTA file of all
the control regions found. The script is capable of finding control regions in
reverse complemented and rotated sequences, unless the feature is split across
the start/end of the sequence.

The general process is as follows:
    + Annotations for the Ile-tRNA and 12S rRNA are located.
    + If necessary, adjustments are made for reverse complemented and
        roatated sequences.
    + the appropriate section of the FASTA section is extracted and printed to
        standard output.

 !! This script has only been tested with mosquito mitogenomes, but should !!
 !! be capable of extracting control regions from any mitogenome bounded   !!
 !! by Ile-tRNA and 12S rRNA                                               !!
"""

#   Make the sequences print to files instead of being held in memory?
#   Extend the system to clip any control region, given command line arguments for the annotation boundaries

"""
You gotta make it find all the ile annotations and find the once closest to ND2's start position.


"""

# command line arguments, regular expressions
import argparse
from BCBio import GFF

def get_params():
    """Returns the command line arguments."""

    parser = argparse.ArgumentParser(description="""
        This script takes an input of a gff file (usually generated by Proka) with a
        ##FASTA section containing the sequence data, and outputs a FASTA file of all
        the control regions found. The script is capable of finding control regions in
        reverse complemented and rotated sequences, unless the feature is split across
        the start/end of the sequence. Output is done through standard output.
        """.strip())
    parser.add_argument("--input", help="The file to be worked on. GFF format with a ##FASTA section.")

    return parser.parse_args()

class SeqInfo:
    """
    Stores information about the sequences and where they get clipped, reverse comp, rotation, etc.
    Also has some methods to deal with looking for the boundaries, finding the control region, etc.
    """

    # start annotation is annotation that should be on the near end of the final outputted control sequence.
    # end is the same but for the far end.
    start_anno_5_prime = -1
    start_anno_3_prime = -1
    end_anno_5_prime = -1
    end_anno_3_prime = -1
    clipped_before = ""
    clipped_after = ""
    inner_flag = False
    rev_comp = False

    def check_flip(self):
        """
        toggles inner_flag if the features has been flipped from the expected orientation (5'-B---A-3' instead of 5'-A---B-3').
        """

        ## safety for sequences when they're both found, and the END sequence is after
        if (self.start_anno_5_prime != -1
                and self.end_anno_5_prime != -1
                and self.end_anno_5_prime < self.start_anno_5_prime):
            self.inner_flag = (not self.inner_flag) # take from between instead of the tails
            # it has to be a toggle instead of an assignment because of weirdnesss with rotated reverse complements.

    def set_start(self, annot):
        """"""
        self.start_anno_5_prime = annot.location.start
        self.start_anno_3_prime = annot.location.end + 1
        self.check_flip()

    def set_end(self, annot):
        """"""
        self.end_anno_5_prime = annot.location.start
        self.end_anno_3_prime = annot.location.end + 1
        # operating under the assumption that the 12S rRNA is on the negative strand
        # so if it isn't, we assume that we're looking at the reverse complement of what we're normally looking at
        if annot.location.strand == "+":
            self.rev_comp = True
            # we have to set inner flag to be "flipped" because of the orientation of the sequence.
            self.inner_flag = True

            # let me essplane:
            #
            # Normal: 5'~tRNA------->12S>~~3'          | Reverse complement: 3'~~<12S<-------tRNA~5'
            # the tRNA is before the rRNA, so we take  | The rRNA is before the tRNA, but we still have
            # from the start, until the tRNA, then     | to take the outer. Because the rotation checker
            # from the rRNA to the end.                | only checks for the position of the rRNA vs tRNA,
            #                                          | it'll see the 12S before and decide that we need
            #                                          | to take the centre, which is false. So we pre-set
            #                                          | it to true to trick it into being correct by
            #                                          | toggling itself back to getting the edges.
            #------------------------------------------+--------------------------------------------------
            # Rotated: 5'--->12S>~~~tRNA----3'         | Rotated RevComp: 3'----tRNA~~~<12S<---5'
            # The 12S rRNA is before the tRNA, so we   | We want the centre, but since the 12S is after
            # take the inner sequence, not the edges.  | the tRNA, the rotation checker will ignore it as
            # The rotation checker will see the 12S    | correct, and take the edges unless we set it to
            # before the tRNA and switch to taking the | true (which we did).
            # middle instead of the edges.             |

            # Is this a kludgy hack born out of tech debt? Probably. Still works, tho
        self.check_flip()

    def parse_seq(self, line, current_base):
        """
        Clips the relevant sequence data from sequences.

        There are four possible states for the sequence:
        - Normal orientation
        - reverse complement
        - annotations in reverse order (sequence has been rotated)
        - reverse complement rotated

        In a normal orientation, it gets sequence data from the 1 position, to the
        start of the "near" annotation, then skips all nucleotides until the end of the
        "end" annotation. These sequences are then concatenated together.

        In the reverse complement, it still grabs data from the edges, but from 1 to the
        start of the "far" annotation, and after the end of the "near" annotation. These
        annotation are only "near" and "far" in reference to the normal orientation. In
        the reverse complement, they get reversed.

        In reverse order, it gets from the end of the "far" to the start of the "near"
        sequence. Again, the annotations are only far/near in reference to the normal
        orientation of the sequence.

        In the reverse complement reverse order, it gets from the end of the "start" to
        the start of the "end." In this case, it's double reversed so the annotation names
        actually bodge their way to being correct.

        Every time this iterates through, it adds nucleotides to "clipped_before" and/or
        "clipped_after", and increments the current base.
        """

        # if we're looking at the reverse complement, we need to flip the boundaries.
        if self.rev_comp:
            near_bound = self.end_anno_5_prime
            far_bound = self.start_anno_3_prime
        else:
            near_bound = self.start_anno_5_prime
            far_bound = self.end_anno_3_prime

        ## DEFAULT BEHAVIOUR:
        #  take from before the tRNA and then after the rRNA
        # clip from the start until whenever the tRNA begins
        if not self.inner_flag:
            self.clipped_before += line[
                :max(0, near_bound - current_base)]

            # Clip after getting to the end of the rRNA
            self.clipped_after += line[
                max(0, far_bound - current_base):]

        ## MODIFIED BEHAVIOUR:
        #  Take BETWEEN the rRNA and the tRNA.
        # This is "backwards" because the expected far bound is nearer when this happens.
        else:
            self.clipped_after += line[
                max(0, far_bound - current_base):
                max(0, near_bound - current_base)]

        ## This always happens
        # return the number of nt parsed so we can increment the counter
        return len(line)

# biopython can also do this, but I feel like it's easier to do it this way if I just need the one thing.
# makes a translation dictionary in case of reverse compliments
NT_ALL  = "AGCTURYKMBVDH" # everything else will get ignored -> '-', 'N', "S", "W" get "complemented" to themselves
NT_COMP = "TCGAAYRMKVBHD"
# build the dictionary and store it
NT_COMP_DICT = str.maketrans(NT_ALL+NT_ALL.lower(), NT_COMP+NT_COMP.lower())

# Uses the library defined just above to get the other strand, then reverses the string
def reverse_comp(seq):
    """returns the reverse complement string of a sequence string."""
    return seq.translate(NT_COMP_DICT)[::-1]

def prepare_line(line):
    """clips the newline off and splits by tabs."""
    return line.strip().split("\t")

def main():
    """Main CLI entry point for extract-control.py"""
    args = get_params()

    # dictionary of sequences indexed by name
    seqs = {}

    with open(args.input, 'r') as seq_file:
        # highest to lowest priority, e.x. 12S is preferred to 12S (partial)
        bound_start = ("mtRNA-Ile(gat)",)

        bound_end = ("12S ribosomal RNA", "12S ribosomal RNA (partial)")

        #through every sequence record in the gff
        for rec in GFF.parse(seq_file):

            if not rec.id in seqs:
                seqs[rec.id] = SeqInfo()

            # through every possible start/end bound
            for start in bound_start:
                # through every feature in every record
                for annot in rec.features:
                    # if it's the correct bound,
                    if annot.qualifiers["product"][0] == start:
                        seqs[rec.id].set_start(annot)
                        print(rec.id+"  "+start+" "+str(seqs[rec.id].start_anno_5_prime)+" "+str(seqs[rec.id].start_anno_3_prime))
                        break # stop searching once we find a match for this -- we prioritize the start of the list

            for end in bound_end:
                for annot in rec.features:
                    # if it's the correct bound,
                    if annot.qualifiers["product"][0] == end:
                        seqs[rec.id].set_end(annot)
                        break # stop searching once we find a match for this -- we prioritize the start of the list

        """



        # get the boundaries or this annotation if needed
        seqs[record.seqid].get_bounds(record, loc)
        """

    # have to re-open it to get at that J U I C Y fasta data
    with open(args.input, 'r') as seq_file:

        for line in seq_file:
            # skip everything until ##FASTA.
            if line[:7] == "##FASTA":
                break

        # current base position being parsed
        current_base = -1

        # name of the sequence being clipped
        clipping_seq = None

        # if we're into the fasta section, after hitting ##FASTA
        for line in seq_file:
            line = line.strip()

            # New fasta sequence, start trimming the sequence for the control region
            if line[:1] == ">":
                current_base = 0
                clipping_seq = line[1:]
            # continue clipping the control region out.
            elif clipping_seq in seqs:
                current_base += seqs[clipping_seq].parse_seq(line, current_base)

    for i in seqs:
        print(">"+i+"_cont_reg")
        seq = seqs[i].clipped_after+seqs[i].clipped_before
        if seqs[i].rev_comp:
            seq = reverse_comp(seq)
        print(seq)

if __name__ == '__main__':
    main()
